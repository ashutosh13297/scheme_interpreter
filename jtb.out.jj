//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniSchemeParser)
import syntaxtree.*;
import java.util.Vector;


public class MiniSchemeParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniSchemeParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <TRUE: "#t">
   | <FALSE: "#f">
   | <IF: "if">
   | <LAMBDA: "lambda">
   | <PLUS: "+">
   | <MINUS: "-">
   | <MULTIPLY: "*">
   | <DIVIDE: "/">
   | <GT: ">">
   | <LT: "<">
   | <EQ: "=">
   | <DEFINE: "define">
   | <BEGIN: "begin">
   | <CAR: "car">
   | <CDR: "cdr">
   | <LIST: "list">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   Line n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=Line()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Goal(n0,n2); }
}

Line Line() :
{
   Expression n0;

   
}
{
   n0=Expression()
   
   { return new Line(n0); }
}

Expression Expression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   TrueLiteral n2;
   FalseLiteral n3;
   Identifier n4;
   ListExpr n5;
   PlusExpression n6;
   MinusExpression n7;
   MultiplyExpression n8;
   DivideExpression n9;
   GTExpression n10;
   LTExpression n11;
   EQExpression n12;
   IfExpression n13;
   DefineExpression n14;
   Assignment n15;
   ProcedureExp n16;
   CarExpr n17;
   CdrExpr n18;
   Application n19;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TrueLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=FalseLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(2)
      n5=ListExpr()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(2)
      n6=PlusExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(2)
      n7=MinusExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(2)
      n8=MultiplyExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(2)
      n9=DivideExpression()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(2)
      n10=GTExpression()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(2)
      n11=LTExpression()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(2)
      n12=EQExpression()
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(2)
      n13=IfExpression()
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(2)
      n14=DefineExpression()
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(2)
      n15=Assignment()
      { n0 = new NodeChoice(n15, 14); }
   |
      LOOKAHEAD(2)
      n16=ProcedureExp()
      { n0 = new NodeChoice(n16, 15); }
   |
      LOOKAHEAD(2)
      n17=CarExpr()
      { n0 = new NodeChoice(n17, 16); }
   |
      LOOKAHEAD(2)
      n18=CdrExpr()
      { n0 = new NodeChoice(n18, 17); }
   |
      LOOKAHEAD(2)
      n19=Application()
      { n0 = new NodeChoice(n19, 18); }
   )
   
   { return new Expression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="#t" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="#f" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FalseLiteral(n0); }
}

ListExpr ListExpr() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   IntegerLiteral n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="list " { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=IntegerLiteral()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new ListExpr(n0,n2,n4,n6); }
}

PlusExpression PlusExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="+" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new PlusExpression(n0,n2,n4,n5,n6); }
}

MinusExpression MinusExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="-" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new MinusExpression(n0,n2,n4,n5,n6); }
}

MultiplyExpression MultiplyExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="*" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new MultiplyExpression(n0,n2,n4,n5,n6); }
}

DivideExpression DivideExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="/" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DivideExpression(n0,n2,n4,n5,n6); }
}

GTExpression GTExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=">" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new GTExpression(n0,n2,n4,n5,n6); }
}

LTExpression LTExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="<" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new LTExpression(n0,n2,n4,n5,n6); }
}

EQExpression EQExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new EQExpression(n0,n2,n4,n5,n6); }
}

IfExpression IfExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   Expression n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="if" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n5=Expression()
   n6=Expression()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new IfExpression(n0,n2,n4,n5,n6,n7); }
}

DefineExpression DefineExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="define" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DefineExpression(n0,n2,n4,n5,n6); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

CarExpr CarExpr() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="car" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new CarExpr(n0,n2,n4,n5); }
}

CdrExpr CdrExpr() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="cdr" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new CdrExpr(n0,n2,n4,n5); }
}

Assignment Assignment() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   Expression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="set!" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n5=Expression()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Assignment(n0,n2,n4,n5,n6); }
}

ProcedureExp ProcedureExp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   Identifier n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="lambda" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=Identifier()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Expression()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ProcedureExp(n0,n2,n4,n6,n8,n10,n11); }
}

Application Application() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeListOptional n3 = new NodeListOptional();
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   (
      n4=Expression()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Application(n0,n2,n3,n5); }
}
