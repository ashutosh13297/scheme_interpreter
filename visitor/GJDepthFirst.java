//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.util.*;
import static visitor.Constants.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R extends ReturnValue,A extends Environment> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public static Boolean isDef = false;

   public static ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
   public static ScriptEngine scriptEngine = scriptEngineManager.getEngineByName("JavaScript");

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
      return (R) new StringValue(n.tokenImage);
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Line() )*
    * f1 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> Expression()
    */
   public R visit(Line n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(_ret != null) {
         R op = (R) getReturnValue(_ret.getValue().toString(),argu);
         if(op != null) {
            op.print();
         } else {
            _ret.print();
         }
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ListExpr()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | MultiplyExpression()
    *       | DivideExpression()
    *       | GTExpression()
    *       | LTExpression()
    *       | EQExpression()
    *       | IfExpression()
    *       | DefineExpression()
    *       | Assignment()
    *       | ProcedureExp()
    *       | CarExpr()
    *       | CdrExpr()
    *       | Application()
    */
   public R visit(Expression n, A argu) {
      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret= (R) new IntValue(Integer.parseInt(n.f0.tokenImage));
//      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "#t"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret = (R) new BoolValue(true);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "#f"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret = (R) new BoolValue(false);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "list "
    * f2 -> ( IntegerLiteral() )*
    * f3 -> ")"
    */
   public R visit(ListExpr n, A argu) {
      R _ret=null;
      List<Integer> arrList = new ArrayList<>();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      for(Node node : n.f2.nodes) {
         arrList.add(((IntValue) node.accept(this, argu)).getValue());
      }
      ListValue list = new ListValue(arrList);
      n.f3.accept(this, argu);
      _ret = (R) list;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "+"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(isDef) {
         R op1 = n.f2.accept(this, argu);
         R op2 = n.f3.accept(this, argu);
         _ret = (R) new StringValue(op1.getValue() + "+" + op2.getValue());
      } else {
         R op1 = getOperand(n.f2.accept(this, argu), argu);
         R op2 = getOperand(n.f3.accept(this, argu), argu);
         n.f4.accept(this, argu);
         if (op1 != null && op2 != null) {
            if (op1 instanceof IntValue && op2 instanceof IntValue) {
               Integer out = (int) op1.getValue() + (int) op2.getValue();
               _ret = (R) new IntValue(out);
            } else {
               if (!(op1 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op1.getValue()));
               }
               if (!(op2 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op2.getValue()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "-"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(isDef) {
         R op1 = n.f2.accept(this, argu);
         R op2 = n.f3.accept(this, argu);
         _ret = (R) new StringValue(op1.getValue() + "-" + op2.getValue());
      } else {
         R op1 = getOperand(n.f2.accept(this, argu), argu);
         R op2 = getOperand(n.f3.accept(this, argu), argu);
         n.f4.accept(this, argu);
         if (op1 != null && op2 != null) {
            if (op1 instanceof IntValue && op2 instanceof IntValue) {
               Integer out = (int) op1.getValue() - (int) op2.getValue();
               _ret = (R) new IntValue(out);
            } else {
               if (!(op1 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op1.getValue()));
               }
               if (!(op2 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op2.getValue()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "*"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(MultiplyExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(isDef) {
         R op1 = n.f2.accept(this, argu);
         R op2 = n.f3.accept(this, argu);
         _ret = (R) new StringValue(op1.getValue() + "*" + op2.getValue());
      } else {
         R op1 = getOperand(n.f2.accept(this, argu), argu);
         R op2 = getOperand(n.f3.accept(this, argu), argu);
         n.f4.accept(this, argu);
         if (op1 != null && op2 != null) {
            if (op1 instanceof IntValue && op2 instanceof IntValue) {
               Integer out = (int) op1.getValue() * (int) op2.getValue();
               _ret = (R) new IntValue(out);
            } else {
               if (!(op1 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op1.getValue()));
               }
               if (!(op2 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op2.getValue()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "/"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(DivideExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(isDef) {
         R op1 = n.f2.accept(this, argu);
         R op2 = n.f3.accept(this, argu);
         _ret = (R) new StringValue(op1.getValue() + "/" + op2.getValue());
      } else {
         R op1 = getOperand(n.f2.accept(this, argu), argu);
         R op2 = getOperand(n.f3.accept(this, argu), argu);
         n.f4.accept(this, argu);
         if (op1 != null && op2 != null) {
            if (op1 instanceof IntValue && op2 instanceof IntValue) {
               Integer out = (int) op1.getValue() / (int) op2.getValue();
               _ret = (R) new IntValue(out);
            } else {
               if (!(op1 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op1.getValue()));
               }
               if (!(op2 instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op2.getValue()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> ">"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(GTExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(isDef) {
         R op1 = n.f2.accept(this, argu);
         R op2 = n.f3.accept(this, argu);
         _ret = (R) new StringValue(op1.getValue() + ">" + op2.getValue());
      } else {
         R op1 = getOperand(n.f2.accept(this, argu), argu);
         R op2 = getOperand(n.f3.accept(this, argu), argu);
         if(op1 != null && op2 != null) {
            if(op1 instanceof IntValue && op2 instanceof IntValue) {
               if((int) op1.getValue() > (int) op2.getValue()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else {
               if(!(op1.getValue() instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op1.getValue()));
               }
               if(!(op2.getValue() instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op2.getValue()));
               }
            }
         }
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "<"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(LTExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(isDef) {
         R op1 = n.f2.accept(this, argu);
         R op2 = n.f3.accept(this, argu);
         _ret = (R) new StringValue(op1.getValue() + "<" + op2.getValue());
      } else {
         R op1 = getOperand(n.f2.accept(this, argu), argu);
         R op2 = getOperand(n.f3.accept(this, argu), argu);
         if (op1 != null && op2 != null) {
            if (op1 instanceof IntValue && op2 instanceof IntValue) {
               if ((Integer) op1.getValue() < (Integer) op2.getValue()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else {
               if (!(op1.getValue() instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op1.getValue()));
               }
               if (!(op2.getValue() instanceof IntValue)) {
                  System.out.println(String.format(ERROR_MSG, op2.getValue()));
               }
            }
         }
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(EQExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(isDef) {
         R op1 = n.f2.accept(this, argu);
         R op2 = n.f3.accept(this, argu);
         _ret = (R) new StringValue(op1.getValue() + "==" + op2.getValue());
      } else {
         R op1 = getOperand(n.f2.accept(this, argu), argu);
         R op2 = getOperand(n.f3.accept(this, argu), argu);
         if (op1 != null && op2 != null) {
            if (op1 instanceof IntValue && op2 instanceof IntValue) {
               if (op1.getValue() == op2.getValue()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else if (op1 instanceof BoolValue && op2 instanceof BoolValue) {
               if (op1.getValue() == op2.getValue()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else {
            }
         }
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "if"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> Expression()
    * f5 -> ")"
    */
   public R visit(IfExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      R condition = n.f2.accept(this, argu);
      if(isDef) {
         StringBuilder ifBody = new StringBuilder("if(");
         ifBody.append(n.f2.accept(this, argu).getValue().toString()).append(")");
         ifBody.append(n.f3.accept(this, argu).getValue().toString()).append("; else ");
         ifBody.append(n.f4.accept(this, argu).getValue().toString()).append(";");
         StringValue stringValue = new StringValue(ifBody.toString());
         return (R) stringValue;
      } else {
         if(condition instanceof BoolValue) {
            if((Boolean) condition.getValue()) {
               return n.f3.accept(this, argu);
            } else {
               return n.f4.accept(this, argu);
            }
         } else {
            System.out.println("Invalid if condition.");
         }
      }

      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "define"
    * f2 -> Identifier()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(DefineExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R id = n.f2.accept(this, argu);
      R exp = n.f3.accept(this, argu);
      if(id != null && exp != null) {
         if(exp instanceof Procedure && ((Procedure) exp).getParentEnv() == null) {
            ((Procedure) exp).setParentEnv(argu);
         }
         argu.table.put((String) id.getValue(), exp);
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret = (R) new StringValue(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "car"
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(CarExpr n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R list = null;
      R listName = n.f2.accept(this, argu);
      if(listName instanceof StringValue) {
         list = (R) getReturnValue(listName.getValue().toString(), argu);
      } else if(listName instanceof ListValue){
         list = listName;
      }
      if(list instanceof ListValue) {
         List<Integer> arrList = ((ListValue) list).getValue();
         if(arrList != null && !arrList.isEmpty()) {
            _ret = (R) new IntValue(arrList.get(0));
         } else {
            System.out.println("Cannot perform car on empty list.");
         }
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "cdr"
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(CdrExpr n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R list = null;
      R listName = n.f2.accept(this, argu);
      if(listName instanceof StringValue) {
         list = (R) getReturnValue(listName.getValue().toString(), argu);
      } else if(listName instanceof ListValue){
         list = listName;
      }
      if(list instanceof ListValue) {
         List<Integer> arrList = ((ListValue) list).getValue();
         if(arrList != null && !arrList.isEmpty()) {
            _ret = (R) new ListValue(arrList.subList(1, arrList.size()));
         } else {
            System.out.println("Cannot perform cdr on empty list.");
         }
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "set!"
    * f2 -> Identifier()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(Assignment n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R id = n.f2.accept(this, argu);
      R exp = n.f3.accept(this, argu);
      putReturnValue(id.getValue().toString(), exp, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "lambda"
    * f2 -> "("
    * f3 -> ( Identifier() )*
    * f4 -> ")"
    * f5 -> Expression()
    * f6 -> ")"
    */
   public R visit(ProcedureExp n, A argu) {
      R _ret=null;
      Procedure procedure = new Procedure();
      isDef = true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      for(Node node : n.f3.nodes) {
         procedure.addParameter(node.accept(this, argu));
      }
      n.f4.accept(this, argu);
      R body = n.f5.accept(this, argu);
      procedure.setBody(body);
      n.f6.accept(this, argu);
      _ret = (R) procedure;
      isDef = false;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ( Expression() )*
    * f3 -> ")"
    */
   @Deprecated(since="11", forRemoval=true)
   public R visit(Application n, A argu) {
      R _ret=null,value;
      Environment env = new Environment();
      n.f0.accept(this, argu);
      R proc = n.f1.accept(this, argu);
      if(!(proc instanceof Procedure)) {
         value = (R) argu.table.get(proc.getValue());
      } else {
         value = proc;
      }
      Procedure val = (Procedure) value;
      ReturnValue body = val.getBody();
      int i = 0;
      if(n.f2.nodes.size() == val.getFormalPrams().size()) {
         for(Node node : n.f2.nodes) {
            R actualArgs = node.accept(this, argu);
            ReturnValue formalArgs = val.getFormalPrams().get(i);
            env.table.put((String) formalArgs.getValue(), actualArgs);
            i++;
         }
      } else {
            System.out.println(String.format(ERROR_ARG_MSG, val.getFormalPrams().size(), n.f2.nodes.size()));
            return null;
      }

      env.parentEnv = val.getParentEnv();

      if(body instanceof Procedure) {
         Procedure procedure = new Procedure();
         procedure.setFormalPrams(((Procedure) body).getFormalPrams());
         procedure.setBody(((Procedure) body).getBody());
         procedure.setParentEnv(env);
         _ret = (R) procedure;
      } else {
         try {
            String exp = (String) body.getValue();
            String constExp = "";
            for(i = 0 ; i < exp.length() ; i++) {
               constExp += getVarValue(String.valueOf(exp.charAt(i)), env);
            }
            constExp += ";";
            Object result = scriptEngine.eval(constExp);
            if(result instanceof Integer){
               _ret = (R) new IntValue((Integer) result);
            } else if (result instanceof Boolean) {
               _ret = (R) new BoolValue((Boolean) result);
            } else if (result instanceof Procedure) {
               _ret = (R) new Procedure((Procedure) result);
            } else if (result instanceof ListValue){
               _ret = (R) new ListValue((ListValue) result);
            }
         } catch (Exception e) {
            e.printStackTrace();
         }
      }

      n.f3.accept(this, argu);
      return _ret;
   }

   public R getOperand(R ret, A argu) {
      if(argu.table.containsKey(ret.getValue())) {
         return (R) argu.table.get(ret.getValue());
      } else {
         return ret;
      }
   }

   public String getVarValue(String var, Environment env) {
      if(env != null) {
         if(env.table.containsKey(var)) {
            return env.table.get(var).getValue().toString();
         } else {
            return getVarValue(var, env.parentEnv);
         }
      } else {
         return var;
      }
   }

   public ReturnValue getReturnValue(String key, A env) {
      if(env != null) {
         if(env.table.containsKey(key)) {
            return env.table.get(key);
         } else {
            return getReturnValue(key, (A) env.parentEnv);
         }
      } else {
         return null;
      }
   }

   public void putReturnValue(String key, ReturnValue val, A env) {
      if(env != null) {
         if(env.table.containsKey(key)) {
            env.table.put(key, val);
         } else {
            putReturnValue(key, val, (A) env.parentEnv);
         }
      } else {
         System.out.println(String.format(ERROR_MSG, key));
      }
   }
}
