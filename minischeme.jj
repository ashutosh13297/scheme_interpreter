options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniSchemeParser)
  public class MiniSchemeParser {}
PARSER_END(MiniSchemeParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < TRUE: "#t" >
| < FALSE: "#f" >
| < IF: "if" >
| < LAMBDA: "lambda" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "=" >
| < DEFINE : "define" >
| < BEGIN : "begin" >
| < CAR : "car" >
| < CDR : "cdr" >
| < LIST : "list" >

}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/**************************************
 * The MiniScheme Grammar Starts Here *
 **************************************/


void Goal() :
{}
{
  (Line())*
  <EOF>
}

void Line() :
{}
{
  Expression()
}

void Expression() :
{}
{
  IntegerLiteral() 
|
  TrueLiteral()
| 
  FalseLiteral()
|
  Identifier()
|
  LOOKAHEAD(2)
  ListExpr()
|
  LOOKAHEAD(2)
  PlusExpression()
|
  LOOKAHEAD(2)
  MinusExpression()
|
  LOOKAHEAD(2)
  MultiplyExpression()
|
  LOOKAHEAD(2)
  DivideExpression()
|
  LOOKAHEAD(2)
  GTExpression()
|
  LOOKAHEAD(2)
  LTExpression()
|
  LOOKAHEAD(2)
  EQExpression()
|
  LOOKAHEAD(2)
  IfExpression()
|
  LOOKAHEAD(2)
  DefineExpression()
| 
  LOOKAHEAD(2)
  Assignment()
|
  LOOKAHEAD(2)
  ProcedureExp()
| 
  LOOKAHEAD(2)
  CarExpr()
| 
  LOOKAHEAD(2)
  CdrExpr()
| 
  LOOKAHEAD(2)
  Application()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void TrueLiteral() :
{}
{
  "#t"
}

void FalseLiteral() :
{}
{
  "#f"
}

void ListExpr() :
{}
{
  "(" "list " (IntegerLiteral())* ")"
}

void PlusExpression() :
{}
{
  "(" "+" Expression() Expression() ")"
}

void MinusExpression() :
{}
{
  "(" "-" Expression() Expression() ")"
}

void MultiplyExpression() :
{}
{
  "(" "*" Expression() Expression() ")"
}

void DivideExpression() :
{}
{
  "(" "/" Expression() Expression() ")"
}

void GTExpression() :
{}
{
  "(" ">" Expression() Expression() ")"
}

void LTExpression() :
{}
{
  "(" "<" Expression() Expression() ")"
}

void EQExpression() :
{}
{
  "(" "=" Expression() Expression() ")"
}



void IfExpression() :
{}
{
  "(" "if" Expression() Expression() Expression() ")"
}

void DefineExpression() :
{}
{
  "(" "define" Identifier() Expression() ")"
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void CarExpr() :
{}
{
  "(" "car" Expression() ")"
}

void CdrExpr() :
{}
{
  "(" "cdr" Expression() ")"
}


void Assignment() :
{}
{
  "(" "set!" Identifier() Expression() ")"
}

void ProcedureExp() :
{}
{ 
  "(" "lambda" "(" ( Identifier() )* ")" Expression() ")"
}

void Application() :
{}
{
  "(" Expression() ( Expression() )* ")"
}
